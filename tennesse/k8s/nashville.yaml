kind: Namespace
apiVersion: v1
metadata:
  name: nashville
  annotations:
    net.beta.kubernetes.io/network-policy: |
      {
        "ingress": {
          "isolation": "DefaultDeny"
        }
      }
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: backend
  namespace: nashville
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
       app: backend
  template:
    metadata:
      name: backend
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: jodydadescott/stupid-container
        command: ["/scripts/nashville.sh"]
        ports:
        - containerPort: 80
        env:
        - name: LISTEN
          value: ":80"
        volumeMounts:
        - name: wrapper
          mountPath: /scripts
      volumes:
      - name: wrapper
        configMap:
          name: run
          defaultMode: 0744
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: middleware
  namespace: nashville
  labels:
    app: middleware
spec:
  replicas: 3
  selector:
    matchLabels:
       app: middleware
  template:
    metadata:
      name: middleware
      labels:
        app: middleware
    spec:
      containers:
      - name: middleware
        image: jodydadescott/stupid-container
        command: ["/scripts/nashville.sh"]
        ports:
        - containerPort: 80
        env:
        - name: LISTEN
          value: ":80"
        volumeMounts:
        - name: wrapper
          mountPath: /scripts
      volumes:
      - name: wrapper
        configMap:
          name: run
          defaultMode: 0744
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: frontend
  namespace: nashville
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
       app: frontend
  template:
    metadata:
      name: frontend
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: jodydadescott/stupid-container
        command: ["/scripts/nashville.sh"]
        ports:
        - containerPort: 80
        env:
        - name: LISTEN
          value: ":80"
        volumeMounts:
        - name: wrapper
          mountPath: /scripts
      volumes:
      - name: wrapper
        configMap:
          name: run
          defaultMode: 0744
---
kind: Service
apiVersion: v1
metadata:
  name: backend
  namespace: nashville
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
kind: Service
apiVersion: v1
metadata:
  name: middleware
  namespace: nashville
spec:
  selector:
    app: middleware
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
kind: Service
apiVersion: v1
metadata:
  name: frontend
  namespace: nashville
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
data:
  nashville.sh: |
    #!/bin/bash

    main() {
      err "Running"
      run=true
      trap sigterm SIGTERM
      trap sigint SIGINT
      trap sighup SIGHUP
      err ""
      event_loop || { err "Fatal!"; return 3; }
      err "Goodbye"
    }

    event_loop() {
      sleep_for 30
      /usr/sbin/stupid-http &
      $run || return 0
      while $run; do
        sleep_for 1
        $run || return 0
        event
      done
    }

    event() {
      /usr/bin/stupid-curl "frontend.memphis.svc.cluster.local"
      /usr/bin/stupid-curl "middleware.memphis.svc.cluster.local"
      /usr/bin/stupid-curl "backend.memphis.svc.cluster.local"

      /usr/bin/stupid-curl "frontend.nashville.svc.cluster.local"
      /usr/bin/stupid-curl "middleware.nashville.svc.cluster.local"
      /usr/bin/stupid-curl "backend.nashville.svc.cluster.local"
    }

    sigterm() {
      err "Caught SIGTERM"
      run=false
    }

    sigint() {
      err "Caught SIGINT"
      run=false
    }

    sighup() {
      err "Caught SIGHUP"
    }

    sleep_for() {
      local t=$1
      [ "$t" -eq "$t" ] || { err "$t is must be a positive integer"; return 2; }
      [ "$t" -gt 0 ] || { err "$t is an integer but must be positived"; return 2; }
      err "Sleeping for $t second(s)"
      local c=0
      while $run; do
        ((c=c+1))
        [ "$c" -ge "$t" ] && return 0
        sleep 1
      done
    }

    sleep_forever() {
      err "Sleeping forever (or until killed)"
      while $run; do
        sleep 1
      done
    }

    err() { echo "$@" 1>&2; }

    main "$@"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: run
  namespace: nashville
